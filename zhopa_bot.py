import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
appointments = {}
available_slots = {}

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä
service_durations = {
    "–ë–æ—Ç—É–ª–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏—è": 45,
    "–ß–∏—Å—Ç–∫–∞": 90
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–µ–Ω—å
def generate_available_slots(date_str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –¥–µ–Ω—å"""
    date = datetime.strptime(date_str, "%d.%m.%Y")
    slots = []
    start_time = datetime(date.year, date.month, date.day, 9, 0)
    end_time = datetime(date.year, date.month, date.day, 20, 0)

    while start_time < end_time:
        slots.append(start_time.strftime("%d.%m.%Y %H:%M"))
        start_time += timedelta(hours=1)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 1 —á–∞—Å
    return slots

# –§—É–Ω–∫—Ü–∏—è /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_keyboard = [['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã', '–£—Å–ª—É–≥–∏', '–ö–æ–≥–¥–∞ —É –º–µ–Ω—è –∑–∞–ø–∏—Å—å?']]
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä **Healthy Skin Aesthetics**.\n\n'
        '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
        'üîπ **–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º** ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n'
        'üîπ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å** ‚Äì —É–∑–Ω–∞–π—Ç–µ, –∫–æ–≥–¥–∞ —É –≤–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∏–∑–∏—Ç.\n'
        'üîπ **–£–∑–Ω–∞—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã** ‚Äì –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å–∞–ª–æ–Ω–∞.\n'
        'üîπ **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥** ‚Äì –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —É—Ö–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n'
        'üîπ **–ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** ‚Äì —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ 1 —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    if job.data:
        await context.bot.send_message(job.data, text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à —Å–∞–ª–æ–Ω —Å–µ–≥–æ–¥–Ω—è!')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_id = update.message.chat.id  

    if text == '–ù–∞–∑–∞–¥':
        reply_keyboard = [['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã', '–£—Å–ª—É–≥–∏', '–ö–æ–≥–¥–∞ —É –º–µ–Ω—è –∑–∞–ø–∏—Å—å?']]
        await update.message.reply_text(
            '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        context.user_data.clear()
        return

    if text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º':
        reply_keyboard = [['–ß–∏—Å—Ç–∫–∞', '–ë–æ—Ç—É–ª–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏—è']]
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        context.user_data['awaiting_service'] = True
    elif context.user_data.get('awaiting_service'):
        context.user_data['service'] = text
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì".')
        context.user_data['awaiting_service'] = False
        context.user_data['awaiting_date'] = True
    elif context.user_data.get('awaiting_date'):
        date = text
        available_slots[date] = generate_available_slots(date)
        reply_keyboard = [[slot] for slot in available_slots[date]]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        context.user_data['selected_date'] = date
        context.user_data['awaiting_date'] = False
        context.user_data['awaiting_time'] = True
    elif context.user_data.get('awaiting_time'):
        selected_time = text
        service = context.user_data['service']
        duration = service_durations[service]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        appointment_time = datetime.strptime(selected_time, '%d.%m.%Y %H:%M')
        end_time = appointment_time + timedelta(minutes=duration)

        for _, time in appointments.values():
            booked_time = datetime.strptime(time, '%d.%m.%Y %H:%M')
            booked_end = booked_time + timedelta(minutes=service_durations[appointments[user_id][0]])

            if (appointment_time < booked_end) and (booked_time < end_time):
                await update.message.reply_text('–≠—Ç–æ—Ç —Å–ª–æ—Ç –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–æ–π –∑–∞–ø–∏—Å—å—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.')
                return

        # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appointments[user_id] = (service, selected_time)

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–æ—Ç–æ–≤
        selected_date = context.user_data['selected_date']
        if selected_date in available_slots:
            new_slots = []
            for slot in available_slots[selected_date]:
                slot_time = datetime.strptime(slot, '%d.%m.%Y %H:%M')
                if slot_time >= end_time or slot_time < appointment_time:
                    new_slots.append(slot)
            available_slots[selected_date] = new_slots

        await update.message.reply_text(
            f'–ó–∞–ø–∏—Å—å –Ω–∞ {service} {selected_time} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.'
        )

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å
        reminder_time = appointment_time - timedelta(hours=1)
        delay = (reminder_time - datetime.now()).total_seconds()

        if delay > 0:
            context.job_queue.run_once(send_reminder, delay, data=user_id)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()

        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        reply_keyboard = [['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã', '–£—Å–ª—É–≥–∏', '–ö–æ–≥–¥–∞ —É –º–µ–Ω—è –∑–∞–ø–∏—Å—å?']]
        await update.message.reply_text(
            '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )

    elif text == '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã':
        await update.message.reply_text('–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 20:00, –ø–Ω-—Å–±.')
    elif text == '–£—Å–ª—É–≥–∏':
        await update.message.reply_text('–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n- –ß–∏—Å—Ç–∫–∞ (90 –º–∏–Ω—É—Ç)\n- –ë–æ—Ç—É–ª–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏—è (45 –º–∏–Ω—É—Ç)')
    elif text == '–ö–æ–≥–¥–∞ —É –º–µ–Ω—è –∑–∞–ø–∏—Å—å?':
        if user_id in appointments:
            service, appointment_time = appointments[user_id]
            await update.message.reply_text(f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å: {service} –Ω–∞ {appointment_time}.')
        else:
            await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def error(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.warning(f'Update {update} caused error {context.error}')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    token = '8181202531:AAHYmgGNpU4BndY7leECn6RpE0LmDD6T6b8'
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error)

    application.run_polling()

if __name__ == '__main__':
    main()
